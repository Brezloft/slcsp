COMMENTS
I chose to require the support of a Mysql server because of the size of the input records.

Since the creation of a mysql user requires root privledges, I chose to create setup.sh and setup.sql to seperate the root
credentials from the main executable.  I create the database and tables in these as well, because it was convenient. The final
steps dropping the temporary user and database were seperated to their own scripts for the same reason.

I chose to only store records in the database tables that would be used to determine the stated requirement to optimize the
execution time.  Removing the extra records dropped execution time by 75%.  Future enhancements may require additional
records to be stored and slow execution time.

While I am comfortable with JOIN queries, I could not determine a straighforward technique that would eliminate the issue of
duplicate state - rate_area tuples in the zips table.  Due to the small number of target zipcodes, the use of nested queries
did not result in unacceptable response time (< 1 second on a shared linux server).  This approach will have scalability
limitations, but appeared adequate for the problem as stated.

Because the zips and plans data were provided by a trusted source, I did not include specific input validation.  If this
application were made available to un-trusted source data, input validation would need to be added.